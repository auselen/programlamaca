object OptParser {
  val switches: Map[Symbol, Any] = Map()
  val inputs: List[Symbol] = List()

  def parse(args: Array[String]): (Map[Symbol, Any], List[Symbol]) = _parse(switches, inputs, args.toList)

  private [this] def _parse(switches: Map[Symbol, Any], inputs: List[Symbol], args: List[String]): (Map[Symbol, Any], List[Symbol]) = {
    args match {
      case Nil => (switches, inputs)
      case arg :: value :: tail if arg.startsWith("--") && !value.startsWith("--") => _parse(switches ++ Map(Symbol(arg.substring(2)) -> value), inputs, tail)
      case arg :: tail if arg.startsWith("--") => _parse(switches ++ Map(Symbol(arg.substring(2)) -> true), inputs, tail)
      case opt :: tail => _parse(switches, inputs :+ Symbol(opt), tail)
    }
  }
}
